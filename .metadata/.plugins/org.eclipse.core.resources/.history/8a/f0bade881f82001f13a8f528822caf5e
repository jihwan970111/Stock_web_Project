package kr.ac.kopo.ctc.stock.web;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/news")
public class NewsController {

    @PostMapping("/collect")
    public ResponseEntity<String> collectNews(@RequestParam String stockName) {
        try {
            CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
                try {
                	System.out.println("Executing Python script for stock: " + stockName);
                    ProcessBuilder processBuilder = new ProcessBuilder("/Users/parkjihwan/miniforge3/bin/python3", "/Users/parkjihwan/Documents/development/Jihwan/Python/news.py", stockName);
                    Process process = processBuilder.start();
                    
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    StringBuilder output = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                    	System.out.println("Python output: " + line);
                        output.append(line);
                    }
                    
                    int exitCode = process.waitFor();
                    System.out.println("Python script exited with code: " + exitCode);  // 종료 코드 로그
                    if (exitCode == 0) {
                        return output.toString();  // JSON 문자열 반환
                    } else {
                        throw new RuntimeException("Python script exited with error code " + exitCode);
                    }
                } catch (Exception e) {
                	System.out.println("Error during Python script execution: " + e.getMessage());
                    throw new RuntimeException("Error during Python script execution", e);
                }
            });

            // 비동기적으로 데이터가 수집되면 클라이언트에 결과 반환
            String result = future.get();
            System.out.println("Final result sent to client: " + result);  // 최종 결과 로그
            return ResponseEntity.ok(future.get());
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error while collecting news data: " + e.getMessage());
        }
    }
}
