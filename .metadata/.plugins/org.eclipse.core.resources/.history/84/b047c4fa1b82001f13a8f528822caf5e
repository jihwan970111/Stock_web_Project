package kr.ac.kopo.ctc.stock.web;

import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.io.File;
import java.util.concurrent.CompletableFuture;
import kr.ac.kopo.ctc.stock.service.News_Crawl;

@RestController
@RequestMapping("/api/news")
public class NewsController {

    // Python 스크립트 실행해서 뉴스 데이터 수집
    @PostMapping("/collect")
    public ResponseEntity<String> collectNews(@RequestParam String stockName) {
    	System.out.println("실행되기는 했어 collect");
    	System.out.println(stockName);
        try {
            // 비동기적으로 Python 스크립트 실행
            CompletableFuture.runAsync(() -> {
                try {
                	ProcessBuilder processBuilder = new ProcessBuilder("/Users/parkjihwan/miniforge3/bin/python3", "/Users/parkjihwan/Documents/development/Jihwan/Python/개인프로젝트파일/news.py", stockName);
                    Process process = processBuilder.start();
                    process.waitFor();
                } catch (Exception e) {
                    throw new RuntimeException("Error during Python script execution", e);
                }
            });

            return ResponseEntity.ok("News data is being collected. You can fetch it later.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while collecting news data: " + e.getMessage());
        }
    }

    // 수집된 h5 파일 다운로드
    @GetMapping("/getNews")
    public ResponseEntity<FileSystemResource> downloadH5(@RequestParam String stockName) {
    	System.out.println("실행되기는 했어");
        try {
            String filePath = "/Users/parkjihwan/Documents/development/Jihwan/Python/개인프로젝트파일/" + stockName + ".h5";
            File file = new File(filePath);

            if (!file.exists()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
            }

            FileSystemResource resource = new FileSystemResource(file);
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + file.getName());

            return new ResponseEntity<>(resource, headers, HttpStatus.OK);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}
